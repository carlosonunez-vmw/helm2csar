package cmd

import (
	"time"

	"github.com/GeertJohan/go.rice/embedded"
)

func init() {

	// define files
	file2 := &embedded.EmbeddedFile{
		Filename:    "TOSCA.meta",
		FileModTime: time.Unix(1604607464, 0),

		Content: string("TOSCA-Meta-File-Version: 1.0\nCSAR-Version: 1.1\nCreated-By: VMware\nEntry-Definitions: Definitions/VNFD.yaml\n"),
	}
	file3 := &embedded.EmbeddedFile{
		Filename:    "vmware_etsi_nfv_sol001_vnfd_2_5_1_types.yaml",
		FileModTime: time.Unix(1604607362, 0),

		Content: string("tosca_definitions_version: tosca_simple_profile_for_nfv_1_0_0 # tosca_simple_yaml_1_2\ndescription: ETSI NFV SOL 001 vnfd types definitions version 2.5.1\n\ndata_types:\n  tosca.datatypes.nfv.L2AddressData:\n    derived_from: tosca.datatypes.Root\n    description: Describes the information on the MAC addresses to be assigned to a connection point.\n    properties:\n      mac_address_assignment:\n        type: boolean\n        description: Specifies if the address assignment is the responsibility of management and orchestration function or not. If it is set to True, it is the management and orchestration function responsibility\n        required: true\n\n  tosca.datatypes.nfv.L3AddressData:\n    derived_from: tosca.datatypes.Root\n    description: Provides information about Layer 3 level addressing scheme and parameters applicable to a CP\n    properties:\n      ip_address_assignment:\n        type: boolean\n        description: Specifies if the address assignment is the responsibility of management and orchestration function or not. If it is set to True, it is the management and orchestration function responsibility\n        required: true\n      floating_ip_activated:\n        type: boolean\n        description: Specifies if the floating IP scheme is activated on the Connection Point or not\n        required: true\n      ip_address_type:\n        type: string\n        description: Defines address type. The address type should be aligned with the address type supported by the layer_protocols properties of the parent VnfExtCp\n        required: false\n        constraints:\n          - valid_values: [ ipv4, ipv6 ]\n      number_of_ip_address:\n        type: integer\n        description: Minimum number of IP addresses to be assigned\n        required: false\n        constraints:\n          - greater_than: 0\n      fixed_ip_address: #VMware change to support static IP address\n        type: list\n        description: Static IP address\n        entry_schema:\n          type: string\n        required: false\n\n  tosca.datatypes.nfv.AddressData:\n    derived_from: tosca.datatypes.Root\n    description: Describes information about the addressing scheme and parameters applicable to a CP\n    properties:\n      address_type:\n        type: string\n        description: Describes the type of the address to be assigned to a connection point. The content type shall be aligned with the address type supported by the layerProtocol property of the connection point\n        required: true\n        constraints:\n          - valid_values: [ mac_address, ip_address ]\n      l2_address_data:\n        type: tosca.datatypes.nfv.L2AddressData\n        description: Provides the information on the MAC addresses to be assigned to a connection point.\n        required: false\n      l3_address_data:\n        type: tosca.datatypes.nfv.L3AddressData\n        description: Provides the information on the IP addresses to be assigned to a connection point\n        required: false\n\n  tosca.datatypes.nfv.VirtualNetworkInterfaceRequirements:\n    derived_from: tosca.datatypes.Root\n    description: Describes requirements on a virtual network interface\n    properties:\n      name:\n        type: string\n        description: Provides a human readable name for the requirement.\n        required: false\n      description:\n        type: string\n        description: Provides a human readable description of the requirement.\n        required: false\n      support_mandatory:\n        type: boolean\n        description: Indicates whether fulfilling the constraint is mandatory (TRUE) for successful operation or desirable (FALSE).\n        required: true\n      network_interface_requirements:\n        type: map\n        description: The network interface requirements. A map of strings that contain a set of key-value pairs that describes the hardware platform specific  network interface deployment requirements.\n        required: true\n        entry_schema:\n          type: string\n      nic_io_requirements:\n        type: tosca.datatypes.nfv.LogicalNodeData\n        description: references (couples) the CP with any logical node I/O requirements (for network devices) that may have been created. Linking these attributes is necessary so that so that I/O requirements that need to be articulated at the logical node level can be associated with the network interface requirements associated with the CP.\n        required: false\n\n  tosca.datatypes.nfv.ConnectivityType:\n    derived_from: tosca.datatypes.Root\n    description: describes additional connectivity information of a virtualLink\n    properties:\n      layer_protocols:\n        type: list\n        description: Identifies the protocol a virtualLink gives access to (ethernet, mpls, odu2, ipv4, ipv6, pseudo-wire).The top layer protocol of the virtualLink protocol stack shall always be provided. The lower layer protocols may be included when there are specific requirements on these layers.\n        required: true\n        entry_schema:\n          type: string\n          constraints:\n            - valid_values: [ ethernet, mpls, odu2, ipv4, ipv6, pseudo-wire ]\n      flow_pattern:\n        type: string\n        description: Identifies the flow pattern of the connectivity\n        required: false\n        constraints:\n          - valid_values: [ line, tree, mesh ]\n\n  tosca.datatypes.nfv.RequestedAdditionalCapability:\n    derived_from: tosca.datatypes.Root\n    description: describes requested additional capability for a particular VDU\n    properties:\n      requested_additional_capability_name:\n        type: string\n        description: Identifies a requested additional capability for the VDU.\n        required: true\n      support_mandatory:\n        type: boolean\n        description: Indicates whether the requested additional capability is mandatory for successful operation.\n        required: true\n      min_requested_additional_capability_version:\n        type: string\n        description: Identifies the minimum version of the requested additional capability.\n        required: false\n      preferred_requested_additional_capability_version:\n        type: string\n        description: Identifies the preferred version of the requested additional capability.\n        required: false\n      target_performance_parameters:\n        type: map\n        description: Identifies specific attributes, dependent on the requested additional capability type.\n        required: true\n        entry_schema:\n          type: string\n\n  tosca.datatypes.nfv.VirtualMemory:\n    derived_from: tosca.datatypes.Root\n    description: supports the specification of requirements related to virtual memory of a virtual compute resource\n    properties:\n      virtual_mem_size:\n        type: scalar-unit.size\n        description: Amount of virtual memory.\n        required: true\n      virtual_mem_oversubscription_policy:\n        type: string\n        description: The memory core oversubscription policy in terms of virtual memory to physical memory on the platform.\n        required: false\n      vdu_mem_requirements:\n        type: map\n        description: The hardware platform specific VDU memory requirements. A map of strings that contains a set of key-value pairs that describes hardware platform specific VDU memory requirements.\n        required: false\n        entry_schema:\n          type: string\n      numa_enabled:\n        type: boolean\n        description: It specifies the memory allocation to be cognisant of the relevant process/core allocation.\n        required: false\n        default: false\n\n  tosca.datatypes.nfv.VirtualCpu:\n    derived_from: tosca.datatypes.Root\n    description: Supports the specification of requirements related to virtual CPU(s) of a virtual compute resource\n    properties:\n      cpu_architecture:\n        type: string\n        description: CPU architecture type. Examples are x86, ARM\n        required: false\n      num_virtual_cpu:\n        type: integer\n        description: Number of virtual CPUs\n        required: true\n        constraints:\n          - greater_than: 0\n      virtual_cpu_clock:\n        type: scalar-unit.frequency\n        description: Minimum virtual CPU clock rate\n        required: false\n      virtual_cpu_oversubscription_policy:\n        type: string\n        description: CPU core oversubscription policy e.g. the relation of virtual CPU cores to physical CPU cores/threads.\n        required: false\n      vdu_cpu_requirements:\n        type: map\n        description: The hardware platform specific VDU CPU requirements. A map of strings that contains a set of key-value pairs describing VDU CPU specific hardware platform requirements.\n        required: false\n        entry_schema:\n          type: string\n      virtual_cpu_pinning:\n        type: tosca.datatypes.nfv.VirtualCpuPinning\n        description: The virtual CPU pinning configuration for the virtualised compute resource.\n        required: false\n\n  tosca.datatypes.nfv.VirtualCpuPinning:\n    derived_from: tosca.datatypes.Root\n    description: Supports the specification of requirements related to the virtual CPU pinning configuration of a virtual compute resource\n    properties:\n      virtual_cpu_pinning_policy:\n        type: string\n        description: 'Indicates the policy for CPU pinning. The policy can take values of \"static\" or \"dynamic\". In case of \"dynamic\" the allocation of virtual CPU cores to logical CPU cores is decided by the VIM. (e.g.: SMT (Simultaneous Multi-Threading) requirements). In case of \"static\" the allocation is requested to be according to the virtual_cpu_pinning_rule.'\n        required: false\n        constraints:\n          - valid_values: [ static, dynamic ]\n      virtual_cpu_pinning_rule:\n        type: list\n        description: Provides the list of rules for allocating virtual CPU cores to logical CPU cores/threads\n        required: false\n        entry_schema:\n          type: string\n\n  tosca.datatypes.nfv.VnfcConfigurableProperties:\n    derived_from: tosca.datatypes.Root\n    description: Defines the configurable properties of a VNFC\n    # properties:\n      # additional_vnfc_configurable_properties:\n      #   type: tosca.datatypes.nfv.VnfcAdditionalConfigurableProperties\n      #   description: Describes additional configuration for VNFC that\n      #   can be modified using the ModifyVnfInfo operation\n      #   required: false\n      # derived types are expected to introduce\n      # additional_vnfc_configurable_properties with its type derived from\n      # tosca.datatypes.nfv.VnfcAdditionalConfigurableProperties\n\n  tosca.datatypes.nfv.VnfcAdditionalConfigurableProperties:\n    derived_from: tosca.datatypes.Root\n    description: VnfcAdditionalConfigurableProperties type is an empty base type for deriving data types for describing additional configurable properties for a given VNFC.\n\n  tosca.datatypes.nfv.VduProfile:\n    derived_from: tosca.datatypes.Root\n    description: describes additional instantiation data for a given Vdu.Compute used in a specific deployment flavour.\n    properties:\n      min_number_of_instances:\n        type: integer\n        description: Minimum number of instances of the VNFC based on this Vdu.Compute that is permitted to exist for a particular VNF deployment flavour.\n        required: true\n        constraints:\n          - greater_or_equal: 0\n      max_number_of_instances:\n        type: integer\n        description: Maximum number of instances of the VNFC based on this Vdu.Compute that is permitted to exist for a particular VNF deployment flavour.\n        required: true\n        constraints:\n          - greater_or_equal: 0\n\n  tosca.datatypes.nfv.VlProfile:\n    derived_from: tosca.datatypes.Root\n    description: Describes additional instantiation data for a given VL used in a specific VNF deployment flavour.\n    properties:\n      max_bitrate_requirements:\n        type: tosca.datatypes.nfv.LinkBitrateRequirements\n        description: Specifies the maximum bitrate requirements for a VL instantiated according to this profile.\n        required: true\n      min_bitrate_requirements:\n        type: tosca.datatypes.nfv.LinkBitrateRequirements\n        description: Specifies the minimum bitrate requirements for a VL instantiated according to this profile.\n        required: true\n      qos:\n        type: tosca.datatypes.nfv.Qos\n        description: Specifies the QoS requirements of a VL instantiated according to this profile.\n        required: false\n      virtual_link_protocol_data:\n        type: list\n        description: Specifies the protocol data for a virtual link.\n        required: false\n        entry_schema:\n          type: tosca.datatypes.nfv.VirtualLinkProtocolData\n\n  tosca.datatypes.nfv.VirtualLinkProtocolData:\n    derived_from: tosca.datatypes.Root\n    description: describes one protocol layer and associated protocol data for a given virtual link used in a specific VNF deployment flavour\n    properties:\n      associated_layer_protocol:\n         type: string\n         description: Identifies one of the protocols a virtualLink gives access to (ethernet, mpls, odu2, ipv4, ipv6, pseudo-wire) as specified by the connectivity_type property.\n         required: true\n         constraints:\n           - valid_values: [ ethernet, mpls, odu2, ipv4, ipv6, pseudo-wire ]\n      l2_protocol_data:\n         type: tosca.datatypes.nfv.L2ProtocolData\n         description: Specifies the L2 protocol data for a virtual link. Shall be present when the associatedLayerProtocol attribute indicates a L2 protocol and shall be absent otherwise.\n         required: false\n      l3_protocol_data:\n         type: tosca.datatypes.nfv.L3ProtocolData\n         description: Specifies the L3 protocol data for this virtual link.  Shall be present when the associatedLayerProtocol attribute indicates a L3 protocol and shall be absent otherwise.\n         required: false\n\n  tosca.datatypes.nfv.L2ProtocolData:\n    derived_from: tosca.datatypes.Root\n    description: describes L2 protocol data for a given virtual link used in a specific VNF deployment flavour.\n    properties:\n      name:\n        type: string\n        description: Identifies the network name associated with this L2 protocol.\n        required: false\n      network_type:\n        type: string\n        description: Specifies the network type for this L2 protocol.The value may be overridden at run-time.\n        required: false\n        constraints:\n          - valid_values: [ flat, vlan, vxlan, gre, geneve ]\n      vlan_transparent:\n        type: boolean\n        description: Specifies whether to support VLAN transparency for this L2 protocol or not.\n        required: false\n        default: false\n      # segmentation_id:\n      #   type: integer\n      #   description: Specifies the ID of the l2 network type - VLAN ID or VXLAN ID # VMware extension\n      #   required: true\n      mtu:\n        type: integer\n        description: Specifies the maximum transmission unit (MTU) value for this L2 protocol.\n        required: false\n        constraints:\n          - greater_than: 0\n\n  tosca.datatypes.nfv.L3ProtocolData:\n    derived_from: tosca.datatypes.Root\n    description: describes L3 protocol data for a given virtual link used in a specific VNF deployment flavour.\n    properties:\n      name:\n        type: string\n        description: Identifies the network name associated with this L3 protocol.\n        required: false\n      ip_version:\n        type: string\n        description: Specifies IP version of this L3 protocol.The value of the ip_version property shall be consistent with the value of the layer_protocol in the connectivity_type property of the virtual link node.\n        required: true\n        constraints:\n          - valid_values: [ ipv4, ipv6 ]\n      cidr:\n        type: string\n        description: Specifies the CIDR (Classless Inter-Domain Routing) of this L3 protocol. The value may be overridden at run-time.\n        required: true\n      ip_allocation_pools:\n        type: list\n        description: Specifies the allocation pools with start and end IP addresses for this L3 protocol. The value may be overridden at run-time.\n        required: false\n        entry_schema:\n          type: tosca.datatypes.nfv.IpAllocationPool\n      gateway_ip:\n        type: string\n        description: Specifies the gateway IP address for this L3 protocol. The value may be overridden at run-time.\n        required: false\n      dhcp_enabled:\n        type: boolean\n        description: Indicates whether DHCP (Dynamic Host Configuration Protocol) is enabled or disabled for this L3 protocol. The value may be overridden at run-time.\n        required: false\n      external:\n        type: boolean\n        description: Indicates whether network needs external connectivity. #VMware change\n        required: false\n        default: false\n      ipv6_address_mode:\n        type: string\n        description: Specifies IPv6 address mode. May be present when the value of the ipVersion attribute is \"ipv6\" and shall be absent otherwise. The value may be overridden at run-time.\n        required: false\n        constraints:\n          - valid_values: [ slaac, dhcpv6-stateful, dhcpv6-stateless ]\n\n  tosca.datatypes.nfv.IpAllocationPool:\n    derived_from: tosca.datatypes.Root\n    description: Specifies a range of IP addresses\n    properties:\n      start_ip_address:\n        type: string\n        description: The IP address to be used as the first one in a pool of addresses derived from the cidr block full IP range\n        required: true\n      end_ip_address:\n        type: string\n        description: The IP address to be used as the last one in a pool of addresses derived from the cidr block full IP range\n        required: true\n\n  tosca.datatypes.nfv.InstantiationLevel:\n    derived_from: tosca.datatypes.Root\n    description: Describes the scale level for each aspect that corresponds to a given level of resources to be instantiated within a deployment flavour in term of the number VNFC instances\n    properties:\n      description:\n        type: string\n        description: Human readable description of the level\n        required: true\n      scale_info:\n        type: map # key: aspectId\n        description: Represents for each aspect the scale level that corresponds to this instantiation level. scale_info shall be present if the VNF supports scaling.\n        required: false\n        entry_schema:\n          type: tosca.datatypes.nfv.ScaleInfo\n\n  tosca.datatypes.nfv.VduLevel:\n    derived_from: tosca.datatypes.Root\n    description: Indicates for a given Vdu.Compute in a given level the number of instances to deploy\n    properties:\n      number_of_instances:\n        type: integer\n        description: Number of instances of VNFC based on this VDU to deploy for this level.\n        required: true\n        constraints:\n          - greater_or_equal: 0\n\n  tosca.datatypes.nfv.VnfLcmOperationsConfiguration:\n    derived_from: tosca.datatypes.Root\n    description: Represents information to configure lifecycle management operations\n    properties:\n      instantiate:\n        type: tosca.datatypes.nfv.VnfInstantiateOperationConfiguration\n        description: Configuration parameters for the InstantiateVnf operation\n        required: false\n      scale:\n        type: tosca.datatypes.nfv.VnfScaleOperationConfiguration\n        description: Configuration parameters for the ScaleVnf operation\n        required: false\n      scale_to_level:\n        type: tosca.datatypes.nfv.VnfScaleToLevelOperationConfiguration\n        description: Configuration parameters for the ScaleVnfToLevel operation\n        required: false\n      change_flavour:\n        type: tosca.datatypes.nfv.VnfChangeFlavourOperationConfiguration\n        description: Configuration parameters for the changeVnfFlavourOpConfig operation\n        required: false\n      heal:\n        type: tosca.datatypes.nfv.VnfHealOperationConfiguration\n        description: Configuration parameters for the HealVnf operation\n        required: false\n      terminate:\n        type: tosca.datatypes.nfv.VnfTerminateOperationConfiguration\n        description: Configuration parameters for the TerminateVnf operation\n        required: false\n      operate:\n        type: tosca.datatypes.nfv.VnfOperateOperationConfiguration\n        description: Configuration parameters for the OperateVnf operation\n        required: false\n      change_ext_connectivity:\n        type:   tosca.datatypes.nfv.VnfChangeExtConnectivityOperationConfiguration\n        description: Configuration parameters for the changeExtVnfConnectivityOpConfig operation\n        required: false\n\n  tosca.datatypes.nfv.VnfInstantiateOperationConfiguration:\n    derived_from: tosca.datatypes.Root\n    description: represents information that affect the invocation of the InstantiateVnf operation.\n\n  tosca.datatypes.nfv.VnfScaleOperationConfiguration:\n    derived_from: tosca.datatypes.Root\n    description: Represents information that affect the invocation of the ScaleVnf operation\n    properties:\n      scaling_by_more_than_one_step_supported:\n        type: boolean\n        description: Signals whether passing a value larger than one in the numScalingSteps parameter of the ScaleVnf operation is supported by this VNF.\n        required: false\n        default: false\n\n  tosca.datatypes.nfv.VnfScaleToLevelOperationConfiguration:\n    derived_from: tosca.datatypes.Root\n    description: represents information that affect the invocation of the ScaleVnfToLevel operation\n    properties:\n      arbitrary_target_levels_supported:\n        type: boolean\n        description: Signals whether scaling according to the parameter \"scaleInfo\" is supported by this VNF\n        required: true\n\n  tosca.datatypes.nfv.VnfHealOperationConfiguration:\n    derived_from: tosca.datatypes.Root\n    description: represents information that affect the invocation of the HealVnf operation\n    properties:\n      causes:\n        type: list\n        description: Supported \"cause\" parameter values\n        required: false\n        entry_schema:\n          type: string\n\n  tosca.datatypes.nfv.VnfTerminateOperationConfiguration:\n    derived_from: tosca.datatypes.Root\n    description: represents information that affect the invocation of the TerminateVnf\n    properties:\n      min_graceful_termination_timeout:\n        type: scalar-unit.time\n        description: Minimum timeout value for graceful termination of a VNF instance\n        required: true\n      max_recommended_graceful_termination_timeout:\n        type: scalar-unit.time\n        description: Maximum recommended timeout value that can be needed to gracefully terminate a VNF instance of a particular type under certain conditions, such as maximum load condition. This is provided by VNF provider as information for the operator facilitating the selection of optimal timeout value. This value is not used as constraint\n        required: false\n\n  tosca.datatypes.nfv.VnfOperateOperationConfiguration:\n    derived_from: tosca.datatypes.Root\n    description: represents information that affect the invocation of the OperateVnf operation\n    properties:\n      min_graceful_stop_timeout:\n        type: scalar-unit.time\n        description: Minimum timeout value for graceful stop of a VNF instance\n        required: true\n      max_recommended_graceful_stop_timeout:\n        type: scalar-unit.time\n        description: Maximum recommended timeout value that can be needed to gracefully stop a VNF instance of a particular type under certain conditions, such as maximum load condition. This is provided by VNF provider as information for the operator facilitating the selection of optimal timeout value. This value is not used as constraint\n        required: false\n\n  tosca.datatypes.nfv.ScaleInfo:\n    derived_from: tosca.datatypes.Root\n    description: Indicates for a given scaleAspect the corresponding scaleLevel\n    properties:\n      scale_level:\n        type: integer\n        description: The scale level for a particular aspect\n        required: true\n        constraints:\n          - greater_or_equal: 0\n\n  tosca.datatypes.nfv.ScalingAspect:\n    derived_from: tosca.datatypes.Root\n    properties:\n      name:\n        type: string\n        required: true\n      description:\n        type: string\n        required: true\n      max_scale_level:\n        type: integer # positiveInteger\n        required: true\n        constraints:\n          - greater_or_equal: 0\n      step_deltas:\n        type: list\n        required: false\n        entry_schema:\n          type: string # Identifier\n\n  tosca.datatypes.nfv.LinkBitrateRequirements:\n    derived_from: tosca.datatypes.Root\n    description: describes the requirements in terms of bitrate for a virtual link\n    properties:\n      root:\n        type: integer # in bits per second\n        description: Specifies the throughput requirement in bits per second of the link (e.g. bitrate of E-Line, root bitrate of E-Tree, aggregate capacity of E-LAN).\n        required: true\n        constraints:\n          - greater_or_equal: 0\n      leaf:\n        type: integer # in bits per second\n        description: Specifies the throughput requirement in bits per second of leaf connections to the link when applicable to the connectivity type (e.g. for E-Tree and E LAN branches).\n        required: false\n        constraints:\n          - greater_or_equal: 0\n\n  tosca.datatypes.nfv.Qos:\n    derived_from: tosca.datatypes.Root\n    description: describes QoS data for a given VL used in a VNF deployment flavour\n    properties:\n      latency:\n        type: scalar-unit.time #Number\n        description: Specifies the maximum latency\n        required: true\n        constraints:\n          - greater_than: 0 s\n      packet_delay_variation:\n        type: scalar-unit.time #Number\n        description: Specifies the maximum jitter\n        required: true\n        constraints:\n          - greater_or_equal: 0 s\n      packet_loss_ratio:\n        type: float\n        description: Specifies the maximum packet loss ratio\n        required: false\n        constraints:\n           - in_range: [ 0.0, 1.0 ]\n\n  tosca.datatypes.nfv.VnfConfigurableProperties:\n    derived_from: tosca.datatypes.Root\n    description: indicates configuration properties for a given VNF (e.g. related to auto scaling and auto healing).\n    properties:\n      is_autoscale_enabled:\n        type: boolean\n        description: It permits to enable (TRUE)/disable (FALSE) the auto-scaling functionality. If the properties is not present for configuring, then VNF property is not supported\n        required: false\n      is_autoheal_enabled:\n        type: boolean\n        description: It permits to enable (TRUE)/disable (FALSE) the auto-healing functionality. If the properties is not present for configuring, then VNF property is not supported\n        required: false\n      # additional_configurable_properties:\n        # description: It provides VNF specific configurable properties that\n        # can be modified using the ModifyVnfInfo operation\n        # required: false\n        # type: tosca.datatypes.nfv.VnfAdditionalConfigurableProperties\n      # derived types are expected to introduce\n      # additional_configurable_properties with its type derived from\n      # tosca.datatypes.nfv.VnfAdditionalConfigurableProperties\n\n  tosca.datatypes.nfv.VnfAdditionalConfigurableProperties:\n    derived_from: tosca.datatypes.Root\n    description: is an empty base type for deriving data types for describing additional configurable properties for a given VNF\n\n  tosca.datatypes.nfv.VnfInfoModifiableAttributes:\n    derived_from: tosca.datatypes.Root\n    description: Describes VNF-specific extension and metadata for a given VNF\n    #properties:\n      #extensions:\n        #type: tosca.datatypes.nfv.VnfInfoModifiableAttributesExtensions\n        #description: \"Extension\" properties of VnfInfo that are writeable\n        #required: false\n        # derived types are expected to introduce\n        # extensions with its type derived from\n        # tosca.datatypes.nfv.VnfInfoModifiableAttributesExtensions\n      #metadata:\n        #type: tosca.datatypes.nfv.VnfInfoModifiableAttributesMetadata\n        #description: \"Metadata\" properties of VnfInfo that are writeable\n        #required: false\n        # derived types are expected to introduce\n        # metadata with its type derived from\n        # tosca.datatypes.nfv.VnfInfoModifiableAttributesMetadata\n\n  tosca.datatypes.nfv.VnfInfoModifiableAttributesExtensions:\n    derived_from: tosca.datatypes.Root\n    description: is an empty base type for deriving data types for describing VNF-specific extension\n\n  tosca.datatypes.nfv.VnfInfoModifiableAttributesMetadata:\n    derived_from: tosca.datatypes.Root\n    description: is an empty base type for deriving data types for describing VNF-specific metadata\n\n  tosca.datatypes.nfv.CpProtocolData:\n    derived_from: tosca.datatypes.Root\n    description: Describes and associates the protocol layer that a CP uses together with other protocol and connection point information\n    properties:\n      associated_layer_protocol:\n        type: string\n        required: true\n        description: One of the values of the property layer_protocols of the CP\n        constraints:\n          - valid_values: [ ethernet, mpls, odu2, ipv4, ipv6, pseudo-wire ]\n      address_data:\n        type: list\n        description: Provides information on the addresses to be assigned to the CP\n        entry_schema:\n          type: tosca.datatypes.nfv.AddressData\n        required: false\n\n  tosca.datatypes.nfv.LogicalNodeData:\n    derived_from: tosca.datatypes.Root\n    description: Describes compute, memory and I/O requirements associated with a particular VDU.\n    properties:\n      logical_node_requirements:\n        type: map\n        description: The logical node-level compute, memory and I/O requirements. A map  of strings that contains a set of key-value pairs that describes hardware platform specific deployment requirements, including the number of CPU cores on this logical node, a memory configuration specific to a logical node  or a requirement related to the association of an I/O device with the logical node.\n        required: false\n        entry_schema:\n          type: string\n\n  tosca.datatypes.nfv.SwImageData:\n    derived_from: tosca.datatypes.Root\n    description: describes information  related to a software image artifact\n    properties: # in SOL001 v0.8.0: \"properties or metadata:\"\n      name:\n        type: string\n        description: Name of this software image\n        required: true\n      version:\n        type: string\n        description: Version of this software image\n        required: true\n      checksum:\n        type: string\n        description:  Checksum of the software image file\n        required: true\n      container_format:\n        type: string\n        description: The container format describes the container file format in which software image is provided\n        required: true\n        constraints:\n          - valid_values: [ aki, ami, ari, bare, docker, ova, ovf ]\n      disk_format:\n        type: string\n        description: The disk format of a software image is the format of the underlying disk image\n        required: true\n        constraints:\n          - valid_values: [ aki, ami, ari, iso, qcow2, raw, vdi, vhd, vhdx, vmdk ]\n      min_disk:\n        type: scalar-unit.size # Number\n        description:  The minimal disk size requirement for this software image\n        required: true\n      min_ram:\n        type: scalar-unit.size # Number\n        description: The minimal RAM requirement for this software image\n        required: false\n      size:\n        type: scalar-unit.size # Number\n        description: The size of this software image\n        required: true\n      operating_system:\n        type: string\n        description: Identifies the operating system used in the software image\n        required: false\n      supported_virtualisation_environments:\n        type: list\n        description: Identifies the virtualisation environments (e.g. hypervisor) compatible with this software image\n        required: false\n        entry_schema:\n          type: string\n\n  tosca.datatypes.nfv.VirtualBlockStorageData:\n    derived_from: tosca.datatypes.Root\n    description: VirtualBlockStorageData describes block storage requirements associated with compute resources in a particular VDU, either as a local disk or as virtual attached storage\n    properties:\n      size_of_storage:\n        type: scalar-unit.size\n        description: Size of virtualised storage resource\n        required: true\n      vdu_storage_requirements:\n        type: map\n        description: The hardware platform specific storage requirements. A map of strings that contains a set of key-value pairs that represents the hardware platform specific storage deployment requirements.\n        required: false\n        entry_schema:\n          type: string\n      rdma_enabled:\n        type: boolean\n        description: Indicates if the storage support RDMA\n        required: false\n        default: false\n\n  tosca.datatypes.nfv.VirtualObjectStorageData:\n      derived_from: tosca.datatypes.Root\n      description: VirtualObjectStorageData describes object storage requirements associated with compute resources in a particular VDU\n      properties:\n        max_size_of_storage:\n          type: scalar-unit.size\n          description: Maximum size of virtualized storage resource\n          required: false\n\n  tosca.datatypes.nfv.VirtualFileStorageData:\n      derived_from: tosca.datatypes.Root\n      description: VirtualFileStorageData describes file storage requirements associated with compute resources in a particular VDU\n      properties:\n        size_of_storage:\n          type: scalar-unit.size\n          description: Size of virtualized storage resource\n          required: true\n        file_system_protocol:\n          type: string\n          description: The shared file system protocol (e.g. NFS, CIFS)\n          required: true\n\n  tosca.datatypes.nfv.VirtualLinkBitrateLevel:\n    derived_from: tosca.datatypes.Root\n    description: Describes bitrate requirements applicable to the virtual link instantiated from a particicular VnfVirtualLink\n    properties:\n      bitrate_requirements:\n        type: tosca.datatypes.nfv.LinkBitrateRequirements\n        description: Virtual link bitrate requirements for an instantiation level or bitrate delta for a scaling step\n        required: true\n\n  tosca.datatypes.nfv.VnfOperationAdditionalParameters:\n    derived_from: tosca.datatypes.Root\n    description: Is an empty base type for deriving data type for describing VNF-specific parameters to be passed when invoking lifecycle management operations\n    #properties:\n\n  tosca.datatypes.nfv.VnfChangeFlavourOperationConfiguration:\n    derived_from: tosca.datatypes.Root\n    description: represents information that affect the invocation of the ChangeVnfFlavour operation\n    #properties:\n\n  tosca.datatypes.nfv.VnfChangeExtConnectivityOperationConfiguration:\n    derived_from: tosca.datatypes.Root\n    description: represents information that affect the invocation of the ChangeExtVnfConnectivity operation\n    #properties:\n\n  tosca.datatypes.nfv.VnfMonitoringParameter:\n    derived_from: tosca.datatypes.Root\n    description: Represents information on virtualised resource related performance metrics applicable to the VNF.\n    properties:\n      name:\n        type: string\n        description: Human readable name of the monitoring parameter\n        required: true\n      performance_metric:\n        type: string\n        description: Identifies the performance metric, according to ETSI GS NFV-IFA 027.\n        required: true\n        constraints:\n          - valid_values: [ v_cpu_usage_mean_vnf, v_cpu_usage_peak_vnf, v_memory_usage_mean_vnf, v_memory_usage_peak_vnf, v_disk_usage_mean_vnf, v_disk_usage_peak_vnf, byte_incoming_vnf_ext_cp, byte_outgoing_vnf_ext_cp,\npacket_incoming_vnf_ext_cp, packet_outgoing_vnf_ext_cp ]\n      collection_period:\n        type: scalar-unit.time\n        description: Describes the recommended periodicity at which to collect the performance information.\n        required: false\n        constraints:\n          - greater_than: 0 s\n\n  tosca.datatypes.nfv.VnfcMonitoringParameter:\n    derived_from: tosca.datatypes.Root\n    description: Represents information on virtualised resource related performance metrics applicable to the VNF.\n    properties:\n      name:\n        type: string\n        description: Human readable name of the monitoring parameter\n        required: true\n      performance_metric:\n        type: string\n        description: Identifies the performance metric, according to ETSI GS NFV-IFA 027.\n        required: true\n        constraints:\n          - valid_values: [ v_cpu_usage_mean_vnf, v_cpu_usage_peak_vnf, v_memory_usage_mean_vnf, v_memory_usage_peak_vnf, v_disk_usage_mean_vnf, v_disk_usage_peak_vnf, byte_incoming_vnf_int_cp, byte_outgoing_vnf_int_cp, packet_incoming_vnf_int_cp, packet_outgoing_vnf_int_cp ]\n      collection_period:\n        type: scalar-unit.time\n        description: Describes the recommended periodicity at which to collect the performance information.\n        required: false\n        constraints:\n          - greater_than: 0 s\n\n  tosca.datatypes.nfv.VirtualLinkMonitoringParameter:\n    derived_from: tosca.datatypes.Root\n    description: Represents information on virtualised resource related performance metrics applicable to the VNF.\n    properties:\n      name:\n        type: string\n        description: Human readable name of the monitoring parameter\n        required: true\n      performance_metric:\n        type: string\n        description: Identifies a performance metric derived from those defined in ETSI GS NFV-IFA 027.The packetOutgoingVirtualLink and packetIncomingVirtualLink metrics shall be obtained by aggregation the PacketOutgoing and PacketIncoming measurements defined in clause 7.1 of GS NFV-IFA 027 of all virtual link ports attached to the virtual link to which the metrics apply.\n        required: true\n        constraints:\n           - valid_values: [ packet_outgoing_virtual_link, packet_incoming_virtual_link ]\n      collection_period:\n        type: scalar-unit.time\n        description: Describes the recommended periodicity at which to collect the performance information.\n        required: false\n        constraints:\n          - greater_than: 0 s\n\n  tosca.datatypes.nfv.InterfaceDetails:\n    derived_from: tosca.datatypes.Root\n    description: information used to access an interface exposed by a VNF\n    properties:\n      uri_components:\n        type: tosca.datatypes.nfv.UriComponents\n        description: Provides components to build a Uniform Ressource Identifier (URI) where to access the interface end point.\n        required: false\n      interface_specific_data:\n        type: map\n        description: Provides additional details that are specific to the type of interface considered.\n        required: false\n        entry_schema:\n          type: string\n\n  tosca.datatypes.nfv.UriComponents:\n    derived_from: tosca.datatypes.Root\n    description: information used to build a URI that complies with IETF RFC 3986 [8].\n    properties:\n      scheme:\n        type: string # shall comply with IETF RFC3986\n        description: scheme component of a URI.\n        required: true\n      authority:\n        type: tosca.datatypes.nfv.UriAuthority\n        description: Authority component of a URI\n        required: false\n      path:\n        type: string # shall comply with IETF RFC 3986\n        description: path component of a URI.\n        required: false\n      query:\n        type: string # shall comply with IETF RFC 3986\n        description: query component of a URI.\n        required: false\n      fragment:\n        type: string # shall comply with IETF RFC 3986\n        description: fragment component of a URI.\n        required: false\n\n  tosca.datatypes.nfv.UriAuthority:\n    derived_from: tosca.datatypes.Root\n    description: information that corresponds to the authority component of a URI as specified in IETF RFC 3986 [8]\n    properties:\n      user_info:\n        type: string # shall comply with IETF RFC 3986\n        description: user_info field of the authority component of a URI\n        required: false\n      host:\n        type: string # shall comply with IETF RFC 3986\n        description: host field of the authority component of a URI\n        required: false\n      port:\n        type: string # shall comply with IETF RFC 3986\n        description: port field of the authority component of a URI\n        required: false\n\n  tosca.datatypes.nfv.VnfProfile:\n    derived_from: tosca.datatypes.Root\n    description: describes a profile for instantiating VNFs of a particular NS DF according to a specific VNFD and VNF DF.\n    properties:\n      instantiation_level:\n        type: string\n        description: Identifier of the instantiation level of the VNF DF to be used for instantiation. If not present, the default instantiation level as declared in the VNFD shall be used.\n        required: false\n      min_number_of_instances:\n        type: integer\n        description: Minimum number of instances of the VNF based on this VNFD that is permitted to exist for this VnfProfile.\n        required: true\n        constraints:\n          - greater_or_equal: 0\n      max_number_of_instances:\n        type: integer\n        description: Maximum number of instances of the VNF based on this VNFD that is permitted to exist for this VnfProfile.\n        required: true\n        constraints:\n          - greater_or_equal: 0\n\n  tosca.datatypes.nfv.InfraRequirements:\n    derived_from: tosca.datatypes.Root\n    properties:\n      node_components:\n        type: tosca.datatypes.nfv.NodeComponents\n        required: true\n      caas_components:\n        type: list\n        required: true\n        entry_schema:\n          type: tosca.datatypes.nfv.CaasComponentsData\n\n  tosca.datatypes.nfv.NodeComponents:\n    derived_from: tosca.datatypes.Root\n    properties:\n      isNumaConfigNeeded:\n        type: boolean\n        required: false\n      kernel:\n        type: tosca.datatypes.nfv.Kernel\n        required: true\n      network:\n        type: tosca.datatypes.nfv.Network\n        required: true\n\n  tosca.datatypes.nfv.Kernel:\n    derived_from: tosca.datatypes.Root\n    properties:\n      kernel_type:\n        type: tosca.datatypes.nfv.KernelType\n        required: true\n      kernel_args:\n        type: list\n        required: true\n        entry_schema:\n          type: tosca.datatypes.nfv.KernelArgsData\n      kernel_modules:\n        type: list\n        required: false\n        entry_schema:\n          type: tosca.datatypes.nfv.KernelModulesData\n      custom_packages:\n        type: list\n        required: false\n        entry_schema:\n          type: tosca.datatypes.nfv.CustomPackagesData\n\n  tosca.datatypes.nfv.KernelType:\n    derived_from: tosca.datatypes.Root\n    properties:\n      name:\n        type: string\n        required: true\n      version:\n        type: string\n        required: true\n      image:\n        type: string\n        required: false\n\n  tosca.datatypes.nfv.KernelArgsData:\n    derived_from: tosca.datatypes.Root\n    properties:\n      key:\n        type: string\n        required: true\n      value:\n        type: string\n        required: false\n\n  tosca.datatypes.nfv.KernelModulesData:\n    derived_from: tosca.datatypes.Root\n    properties:\n      name:\n        type: string\n        required: true\n      version:\n        type: string\n        required: false\n\n  tosca.datatypes.nfv.CustomPackagesData:\n    derived_from: tosca.datatypes.Root\n    properties:\n      name:\n        type: string\n        required: true\n      version:\n        type: string\n        required: false\n\n  tosca.datatypes.nfv.Network:\n    derived_from: tosca.datatypes.Root\n    properties:\n      devices:\n        type: list\n        required: true\n        entry_schema:\n          type: tosca.datatypes.nfv.NetworkDevices\n\n  tosca.datatypes.nfv.NetworkDevices:\n    derived_from: tosca.datatypes.Root\n    properties:\n      deviceType:\n        type: string\n        required: true\n      networkName:\n        type: string\n        required: true\n      resourceName:\n        type: string\n        required: true\n      dpdkBinding:\n        type: string\n        required: false\n\n  tosca.datatypes.nfv.CaasComponentsData:\n    derived_from: tosca.datatypes.Root\n    properties:\n      name:\n        type: string\n        required: true\n      type:\n        type: string\n        required: true\n      version:\n        type: string\n        required: false\n      properties:\n        type: tosca.datatypes.nfv.CaasProperties\n        required: false\n\n  tosca.datatypes.nfv.CaasProperties:\n    derived_from: tosca.datatypes.Root\n\n\nartifact_types:\n  tosca.artifacts.nfv.SwImage:\n    derived_from: tosca.artifacts.Deployment.Image\n    description: describes the software image which is directly loaded on the virtualisation container realizing of the VDU or is to be loaded on a virtual storage resource.\n\n  tosca.artifacts.Implementation.nfv.Mistral:\n    derived_from: tosca.artifacts.Implementation\n    description: artifacts for Mistral workflows\n    mime_type: application/x-yaml\n    file_ext: [ yaml ]\n\ncapability_types:\n  tosca.capabilities.nfv.VirtualBindable:\n    derived_from: tosca.capabilities.Node\n    description: Indicates that the node that includes it can be pointed by a tosca.relationships.nfv.VirtualBindsTo relationship type which is used to model the VduHasCpd association\n\n  tosca.capabilities.nfv.VirtualLinkable:\n    derived_from: tosca.capabilities.Root\n    description: A node type that includes the VirtualLinkable capability indicates that it can be pointed by tosca.relationships.nfv.VirtualLinksTo relationship type\n\n  tosca.capabilities.nfv.VirtualCompute:\n    derived_from: tosca.capabilities.Root #VMware change: changing Node to Root\n    description: Describes the capabilities related to virtual compute resources\n    properties:\n      logical_node:\n        type: map\n        description: Describes the Logical Node requirements\n        required: false\n        entry_schema:\n           type: tosca.datatypes.nfv.LogicalNodeData\n      requested_additional_capabilities:\n        type: map\n        description: Describes additional capability for a particular VDU\n        required: false\n        entry_schema:\n           type: tosca.datatypes.nfv.RequestedAdditionalCapability\n      compute_requirements:\n        type: map\n        required: false\n        entry_schema:\n           type: string\n      virtual_memory:\n        type: tosca.datatypes.nfv.VirtualMemory\n        description: Describes virtual memory of the virtualized compute\n        required: true\n      virtual_cpu:\n        type: tosca.datatypes.nfv.VirtualCpu\n        description: Describes virtual CPU(s) of the virtualized compute\n        required: true\n      virtual_local_storage:\n        type: list\n        description: A list of virtual system disks created and destroyed as part of the VM lifecycle\n        required: false\n        entry_schema:\n          type: tosca.datatypes.nfv.VirtualBlockStorageData\n          description: virtual system disk definition\n\n  tosca.capabilities.nfv.VirtualStorage:\n    derived_from: tosca.capabilities.Root\n    description: Describes the attachment capabilities related to Vdu.Storage\n\nrelationship_types:\n  tosca.relationships.nfv.VirtualBindsTo:\n    derived_from: tosca.relationships.DependsOn\n    description: Represents an association relationship between Vdu.Compute and VduCp node types\n    valid_target_types: [ tosca.capabilities.nfv.VirtualBindable ]\n\n  tosca.relationships.nfv.VirtualLinksTo:\n    derived_from: tosca.relationships.DependsOn\n    description: Represents an association relationship between the VduCp and VnfVirtualLink node types\n    valid_target_types: [ tosca.capabilities.nfv.VirtualLinkable ]\n\n  tosca.relationships.nfv.AttachesTo:\n    derived_from: tosca.relationships.Root\n    description: Represents an association relationship between the Vdu.Compute and one of the node types, Vdu.VirtualBlockStorage, Vdu.VirtualObjectStorage or Vdu.VirtualFileStorage\n    valid_target_types: [ tosca.capabilities.nfv.VirtualStorage ]\n\ninterface_types:\n  tosca.interfaces.nfv.Vnflcm:\n    derived_from: tosca.interfaces.Root\n    description: This interface encompasses a set of TOSCA operations corresponding to the VNF LCM operations defined in ETSI GS NFV-IFA 007 as well as to preamble and postamble procedures to the execution of the VNF LCM operations.\n    instantiate:\n      description: Invoked upon receipt of an Instantiate VNF request\n      # inputs:\n        # additional_parameters:\n          # type: tosca.datatypes.nfv.VnfOperationAdditionalParameters\n          # required: false\n        # derived types are expected to introduce additional_parameters with\n        # its type derived from\n        # tosca.datatypes.nfv.VnfOperationAdditionalParameters\n    instantiate_start:\n      description: Invoked before instantiate\n    instantiate_end:\n      description: Invoked after instantiate\n    terminate:\n      description: Invoked upon receipt Terminate VNF request\n      # inputs:\n        # additional_parameters:\n          # type: tosca.datatypes.nfv.VnfOperationAdditionalParameters\n          # required: false\n        # derived types are expected to introduce additional_parameters with\n        # its type derived from\n        # tosca.datatypes.nfv.VnfOperationAdditionalParameters\n    terminate_start:\n      description: Invoked before terminate\n    terminate_end:\n      description: Invoked after terminate\n    modify_information:\n      description: Invoked upon receipt of a Modify VNF Information request\n    modify_information_start:\n      description: Invoked before modify_information\n    modify_information_end:\n      description: Invoked after modify_information\n    change_flavour:\n      description: Invoked upon receipt of a Change VNF Flavour request\n      # inputs:\n        # additional_parameters:\n          # type: tosca.datatypes.nfv.VnfOperationAdditionalParameters\n          # required: false\n        # derived types are expected to introduce additional_parameters with\n        # its type derived from\n        # tosca.datatypes.nfv.VnfOperationAdditionalParameters\n    change_flavour_start:\n      description: Invoked before change_flavour\n    change_flavour_end:\n      description: Invoked after change_flavour\n    change_external_connectivity:\n      description: Invoked upon receipt of a Change External VNF Connectivity   request\n      # inputs:\n        # additional_parameters:\n          # type: tosca.datatypes.nfv.VnfOperationAdditionalParameters\n          # required: false\n        # derived types are expected to introduce additional_parameters with\n        # its type derived from\n        # tosca.datatypes.nfv.VnfOperationAdditionalParameters\n    change_external_connectivity_start:\n      description: Invoked before change_external_connectivity\n    change_external_connectivity_end:\n      description: Invoked after change_external_connectivity\n    operate:\n      description: Invoked upon receipt of an Operate VNF request\n      # inputs:\n        # additional_parameters:\n          # type: tosca.datatypes.nfv.VnfOperationAdditionalParameters\n          # required: false\n        # derived types are expected to introduce additional_parameters with\n        # its type derived from\n        # tosca.datatypes.nfv.VnfOperationAdditionalParameters\n    operate_start:\n      description: Invoked before operate\n    operate_end:\n      description: Invoked after operate\n    heal:\n      description: Invoked upon receipt of a Heal VNF request\n      # inputs:\n        # additional_parameters:\n          # type: tosca.datatypes.nfv.VnfOperationAdditionalParameters\n          # required: false\n        # derived types are expected to introduce additional_parameters with\n        # its type derived from\n        # tosca.datatypes.nfv.VnfOperationAdditionalParameters\n    heal_start:\n      description: Invoked before heal\n    heal_end:\n      description: Invoked after heal\n    scale:\n      description: Invoked upon receipt of a Scale VNF request\n      # inputs:\n        # additional_parameters:\n          # type: tosca.datatypes.nfv.VnfOperationAdditionalParameters\n          # required: false\n        # derived types are expected to introduce additional_parameters with\n        # its type derived from\n        # tosca.datatypes.nfv.VnfOperationAdditionalParameters\n    scale_start:\n      description: Invoked before scale\n    scale_end:\n      description: Invoked after scale\n    scale_to_level:\n      description: Invoked upon receipt of a Scale VNF to Level request\n      # inputs:\n        # additional_parameters:\n          # type: tosca.datatypes.nfv.VnfOperationAdditionalParameters\n          # required: false\n        # derived types are expected to introduce additional_parameters with\n        # its type derived from\n        # tosca.datatypes.nfv.VnfOperationAdditionalParameters\n    scale_to_level_start:\n      description: Invoked before scale_to_level\n    scale_to_level_end:\n      description: Invoked after scale_to_level\n\nnode_types:\n\n  tosca.nodes.nfv.VMware.VNF: # VMware change\n    derived_from: tosca.nodes.nfv.VNF\n    description: The generic abstract type from which all VNF specific abstract node types shall be derived to form, together with other node types, the TOSCA service template(s) representing the VNFD\n    properties:\n      descriptor_id: # instead of vnfd_id\n        type: string # GUID\n        description: Globally unique identifier of the VNFD\n        required: true\n      descriptor_version: # instead of vnfd_version\n        type: string\n        description: Identifies the version of the VNFD\n        required: true\n      provider: # instead of vnf_provider\n        type: string\n        description: Provider of the VNF and of the VNFD\n        required: true\n      product_name: # instead of vnf_product_name\n        type: string\n        description: Human readable name for the VNF Product\n        required: true\n      software_version: # instead of vnf_software_version\n        type: string\n        description: Software version of the VNF\n        required: true\n      product_info_name: # instead of vnf_product_info_name\n        type: string\n        description: Human readable name for the VNF Product\n        required: false\n      product_info_description: # instead of vnf_product_info_description\n        type: string\n        description: Human readable description of the VNF Product\n        required: false\n      vnfm_info:\n        type: list\n        required: true\n        description: Identifies VNFM(s) compatible with the VNF\n        entry_schema:\n          type: string\n      localization_languages:\n        type: list\n        description: Information about localization languages of the VNF\n        required: false\n        entry_schema:\n          type: string #IETF RFC 5646 string\n      default_localization_language:\n        type: string #IETF RFC 5646 string\n        description: Default localization language that is instantiated if no information about selected localization language is available\n        required: false\n      #configurable_properties:\n        #type: tosca.datatypes.nfv.VnfConfigurableProperties\n        #description: Describes the configurable properties of the VNF\n        #required: false\n        # derived types are expected to introduce configurable_properties\n        # with its type derived from\n        # tosca.datatypes.nfv.VnfConfigurableProperties\n      #modifiable_attributes:\n        #type: tosca.datatypes.nfv.VnfInfoModifiableAttributes\n        #description: Describes the modifiable attributes of the VNF\n        #required: false\n        # derived types are expected to introduce modifiable_attributes\n        # with its type derived from\n        # tosca.datatypes.nfv.VnfInfoModifiableAttributes\n      lcm_operations_configuration:\n        type: tosca.datatypes.nfv.VnfLcmOperationsConfiguration\n        description: Describes the configuration parameters for the VNF LCM operations\n        required: false\n      monitoring_parameters:\n        type: list\n        entry_schema:\n          type: tosca.datatypes.nfv.VnfMonitoringParameter\n        description: Describes monitoring parameters applicable to the VNF.\n        required: false\n      flavour_id:\n        type: string\n        description: Identifier of the Deployment Flavour within the VNFD\n        required: true\n      flavour_description:\n        type: string\n        description: Human readable description of the DF\n        required: true\n      #vnf_profile:\n      #  type: tosca.datatypes.nfv.VnfProfile\n      #  description: Describes a profile for instantiating VNFs of a particular NS DF according to a specific VNFD and VNF DF\n      #  required: false\n    requirements:\n      - virtual_link:\n          capability: tosca.capabilities.nfv.VirtualLinkable\n          relationship: tosca.relationships.nfv.VirtualLinksTo\n          occurrences: [ 0, 1 ]\n  # Additional requirements shall be defined in the VNF specific node type (deriving from tosca.nodes.nfv.VNF) corresponding to NS virtual links that need to connect to VnfExtCps\n    interfaces:\n      Vnflcm:\n        type: tosca.interfaces.nfv.Vnflcm\n\n  tosca.nodes.nfv.VMware.CNF: # VMware change\n    derived_from: tosca.nodes.nfv.VMware.VNF\n    description: The generic abstract type from which all CNF specific abstract node types shall be derived to form, together with other node types, the TOSCA service template(s) representing the CNFD\n\n  tosca.nodes.nfv.Vdu.Compute.Helm:\n    derived_from: tosca.nodes.nfv.Vdu.Compute\n    description: The generic Helm abstract type from which all CNFs\n    properties:\n      chartName:\n        type: string\n        description: Helm Chart Name\n        required: true\n      chartVersion:\n        type: string\n        description: Helm Chart Version\n        required: true\n      helmVersion:\n        type: string\n        description: Helm Chart Version\n        required: true\n        default: v3\n\n  tosca.nodes.nfv.VMware.CnfCp:\n    derived_from: tosca.nodes.nfv.VduCp\n    description: Describes the information about an CNF CP\n    properties:\n      configurable_properties:\n        type: tosca.datatypes.nfv.VnfcConfigurableProperties\n        required: true\n\n  tosca.nodes.nfv.VNF:\n    derived_from: tosca.nodes.Root\n    description: The generic abstract type from which all VNF specific abstract node types shall be derived to form, together with other node types, the TOSCA service template(s) representing the VNFD\n    properties:\n      descriptor_id: # instead of vnfd_id\n        type: string # GUID\n        description: Globally unique identifier of the VNFD\n        required: true\n      descriptor_version: # instead of vnfd_version\n        type: string\n        description: Identifies the version of the VNFD\n        required: true\n      provider: # instead of vnf_provider\n        type: string\n        description: Provider of the VNF and of the VNFD\n        required: true\n      product_name: # instead of vnf_product_name\n        type: string\n        description: Human readable name for the VNF Product\n        required: true\n      software_version: # instead of vnf_software_version\n        type: string\n        description: Software version of the VNF\n        required: true\n      product_info_name: # instead of vnf_product_info_name\n        type: string\n        description: Human readable name for the VNF Product\n        required: false\n      product_info_description: # instead of vnf_product_info_description\n        type: string\n        description: Human readable description of the VNF Product\n        required: false\n      vnfm_info:\n        type: list\n        required: true\n        description: Identifies VNFM(s) compatible with the VNF\n        entry_schema:\n          type: string\n      localization_languages:\n        type: list\n        description: Information about localization languages of the VNF\n        required: false\n        entry_schema:\n          type: string #IETF RFC 5646 string\n      default_localization_language:\n        type: string #IETF RFC 5646 string\n        description: Default localization language that is instantiated if no information about selected localization language is available\n        required: false\n      #configurable_properties:\n        #type: tosca.datatypes.nfv.VnfConfigurableProperties\n        #description: Describes the configurable properties of the VNF\n        #required: false\n        # derived types are expected to introduce configurable_properties\n        # with its type derived from\n        # tosca.datatypes.nfv.VnfConfigurableProperties\n      #modifiable_attributes:\n        #type: tosca.datatypes.nfv.VnfInfoModifiableAttributes\n        #description: Describes the modifiable attributes of the VNF\n        #required: false\n        # derived types are expected to introduce modifiable_attributes\n        # with its type derived from\n        # tosca.datatypes.nfv.VnfInfoModifiableAttributes\n      lcm_operations_configuration:\n        type: tosca.datatypes.nfv.VnfLcmOperationsConfiguration\n        description: Describes the configuration parameters for the VNF LCM operations\n        required: false\n      monitoring_parameters:\n        type: list\n        entry_schema:\n          type: tosca.datatypes.nfv.VnfMonitoringParameter\n        description: Describes monitoring parameters applicable to the VNF.\n        required: false\n      flavour_id:\n        type: string\n        description: Identifier of the Deployment Flavour within the VNFD\n        required: true\n      flavour_description:\n        type: string\n        description: Human readable description of the DF\n        required: true\n      infra_requirements:\n        type: tosca.datatypes.nfv.InfraRequirements\n        description: Infrastructure requirements for instantiating CNF/ VNF\n        required: false\n      #vnf_profile:\n      #  type: tosca.datatypes.nfv.VnfProfile\n      #  description: Describes a profile for instantiating VNFs of a particular NS DF according to a specific VNFD and VNF DF\n      #  required: false\n    requirements:\n      - virtual_link:\n          capability: tosca.capabilities.nfv.VirtualLinkable\n          relationship: tosca.relationships.nfv.VirtualLinksTo\n          occurrences: [ 0, 1 ]\n  # Additional requirements shall be defined in the VNF specific node type (deriving from tosca.nodes.nfv.VNF) corresponding to NS virtual links that need to connect to VnfExtCps\n    interfaces:\n      Vnflcm:\n        type: tosca.interfaces.nfv.Vnflcm\n\n  tosca.nodes.nfv.VnfExtCp:\n    derived_from: tosca.nodes.nfv.Cp\n    description: Describes a logical external connection point, exposed by the VNF enabling connection with an external Virtual Link\n    properties:\n      virtual_network_interface_requirements:\n        type: list\n        description: The actual virtual NIC requirements that is been assigned when instantiating the connection point\n        required: false\n        entry_schema:\n          type: tosca.datatypes.nfv.VirtualNetworkInterfaceRequirements\n    requirements:\n      - external_virtual_link:\n          capability: tosca.capabilities.nfv.VirtualLinkable\n          relationship: tosca.relationships.nfv.VirtualLinksTo\n      - internal_virtual_link: #name in ETSI NFV IFA011 v0.7.3: intVirtualLinkDesc\n          capability: tosca.capabilities.nfv.VirtualLinkable\n          relationship: tosca.relationships.nfv.VirtualLinksTo\n\n  tosca.nodes.nfv.Vdu.Compute:\n    derived_from: tosca.nodes.Root\n    description:  Describes the virtual compute part of a VDU which is a construct   supporting the description of the deployment and operational behavior of a VNFC\n    properties:\n      name:\n        type: string\n        description: Human readable name of the VDU\n        required: true\n      description:\n        type: string\n        description: Human readable description of the VDU\n        required: true\n      boot_order:\n        type: list # explicit index (boot index) not necessary, contrary to IFA011\n        description: References a node template name from which a valid boot device is created\n        required: false\n        entry_schema:\n          type: string\n      nfvi_constraints:\n        type: list\n        description: Describes constraints on the NFVI for the VNFC instance(s) created from this VDU\n        required: false\n        entry_schema:\n          type: string\n      monitoring_parameters:\n        type: list\n        description: Describes monitoring parameters applicable to a VNFC instantiated from this VDU\n        required: false\n        entry_schema:\n          type: tosca.datatypes.nfv.VnfcMonitoringParameter\n      #configurable_properties:\n         #type: tosca.datatypes.nfv.VnfcConfigurableProperties\n         #required: false\n         # derived types are expected to introduce\n         # configurable_properties with its type derived from\n         # tosca.datatypes.nfv.VnfcConfigurableProperties\n      vdu_profile:\n        type: tosca.datatypes.nfv.VduProfile\n        description: Defines additional instantiation data for the VDU.Compute node\n        required: true\n      sw_image_data:\n        type: tosca.datatypes.nfv.SwImageData\n        description: Defines information related to a SwImage artifact used by this Vdu.Compute node\n        required: false # property is required when the node template has an associated artifact of type tosca.artifacts.nfv.SwImage and not required otherwise\n      boot_data:\n        type: string\n        description: Contains a string or a URL to a file contained in the VNF package used to customize a virtualised compute resource at boot time. The bootData may contain variable parts that are replaced by deployment specific values before being sent to the VIM.\n        required: false\n    capabilities:\n      virtual_compute:\n        type: tosca.capabilities.nfv.VirtualCompute\n        occurrences: [ 1, 1 ]\n      virtual_binding:\n        type: tosca.capabilities.nfv.VirtualBindable\n        occurrences: [ 1, UNBOUNDED ]\n    requirements:\n      - virtual_storage:\n          capability: tosca.capabilities.nfv.VirtualStorage\n          relationship: tosca.relationships.nfv.AttachesTo\n          occurrences: [ 0, UNBOUNDED ]\n\n  tosca.nodes.nfv.Vdu.VirtualBlockStorage:\n    derived_from: tosca.nodes.Root\n    description: This node type describes the specifications of requirements related to virtual block storage resources\n    properties:\n      virtual_block_storage_data:\n        type: tosca.datatypes.nfv.VirtualBlockStorageData\n        description: Describes the block storage characteristics.\n        required: true\n      sw_image_data:\n        type: tosca.datatypes.nfv.SwImageData\n        description: Defines information related to a SwImage artifact used by this Vdu.Compute node.\n        required: false # property is required when the node template has an associated artifact of type tosca.artifacts.nfv.SwImage and not required otherwise\n    capabilities:\n      virtual_storage:\n        type: tosca.capabilities.nfv.VirtualStorage\n        description: Defines the capabilities of virtual_storage.\n\n  tosca.nodes.nfv.Vdu.VirtualObjectStorage:\n    derived_from: tosca.nodes.Root\n    description: This node type describes the specifications of requirements related to virtual object storage resources\n    properties:\n      virtual_object_storage_data:\n        type: tosca.datatypes.nfv.VirtualObjectStorageData\n        description: Describes the object  storage characteristics.\n        required: true\n    capabilities:\n      virtual_storage:\n        type: tosca.capabilities.nfv.VirtualStorage\n        description: Defines the capabilities of virtual_storage.\n\n  tosca.nodes.nfv.Vdu.VirtualFileStorage:\n    derived_from: tosca.nodes.Root\n    description: This node type describes the specifications of requirements related to virtual file storage resources\n    properties:\n      virtual_file_storage_data:\n        type: tosca.datatypes.nfv.VirtualFileStorageData\n        description: Describes the file  storage characteristics.\n        required: true\n    capabilities:\n      virtual_storage:\n        type: tosca.capabilities.nfv.VirtualStorage\n        description: Defines the capabilities of virtual_storage.\n    requirements:\n     - virtual_link:\n         capability: tosca.capabilities.nfv.VirtualLinkable\n         relationship: tosca.relationships.nfv.VirtualLinksTo\n         #description: Describes the requirements for linking to virtual link\n\n  tosca.nodes.nfv.Cp:\n    derived_from: tosca.nodes.Root\n    description:  Provides information regarding the purpose of the connection point\n    properties:\n      layer_protocols:\n        type: list\n        description: Identifies which protocol the connection point uses for connectivity purposes\n        required: true\n        entry_schema:\n          type: string\n          constraints:\n            - valid_values: [ ethernet, mpls, odu2, ipv4, ipv6, pseudo-wire ]\n      role: #Name in ETSI NFV IFA011 v0.7.3: cpRole\n        type: string\n        description: Identifies the role of the port in the context of the traffic flow patterns in the VNF or parent NS\n        required: false\n        constraints:\n          - valid_values: [ root, leaf ]\n      description:\n        type: string\n        description: Provides human-readable information on the purpose of the connection point\n        required: false\n      protocol:\n        type: list\n        description: Provides information on the addresses to be assigned to the connection point(s) instantiated from this Connection Point Descriptor\n        required: false\n        entry_schema:\n          type: tosca.datatypes.nfv.CpProtocolData\n      trunk_mode:\n        type: boolean\n        description: Provides information about whether the CP instantiated from this Cp is in Trunk mode (802.1Q or other), When operating in \"trunk mode\", the Cp is capable of carrying traffic for several VLANs. Absence of this property implies that trunkMode is not configured for the Cp i.e. It is equivalent to boolean value \"false\".\n        required: false\n\n  tosca.nodes.nfv.VduCp:\n    derived_from: tosca.nodes.nfv.Cp\n    description: describes network connectivity between a VNFC instance based on this VDU and an internal VL\n    properties:\n      bitrate_requirement:\n        type: integer   # in bits per second\n        description: Bitrate requirement in bit per second on this connection point\n        required: false\n        constraints:\n          - greater_or_equal: 0\n      virtual_network_interface_requirements:\n        type: list\n        description: Specifies requirements on a virtual network interface realising the CPs instantiated from this CPD\n        required: false\n        entry_schema:\n          type: tosca.datatypes.nfv.VirtualNetworkInterfaceRequirements\n      order:\n        type: integer\n        description: The order of the NIC on the compute instance (e.g.eth2)\n        required: false\n        constraints:\n          - greater_or_equal: 0\n      vnic_type:\n        type: string\n        description: Describes the type of the virtual network interface realizing the CPs instantiated from this CPD\n        required: false\n        constraints:\n        - valid_values: [ normal, virtio, direct-physical ]\n    requirements:\n      - virtual_link:\n          capability: tosca.capabilities.nfv.VirtualLinkable\n          relationship: tosca.relationships.nfv.VirtualLinksTo\n      - virtual_binding:\n          capability: tosca.capabilities.nfv.VirtualBindable\n          relationship: tosca.relationships.nfv.VirtualBindsTo\n          node: tosca.nodes.nfv.Vdu.Compute\n\n  tosca.nodes.nfv.VnfVirtualLink:\n    derived_from: tosca.nodes.Root\n    description: Describes the information about an internal VNF VL\n    properties:\n      connectivity_type:\n        type: tosca.datatypes.nfv.ConnectivityType\n        description: Specifies the protocol exposed by the VL and the flow pattern supported by the VL\n        required: true\n      description:\n        type: string\n        description: Provides human-readable information on the purpose of the VL\n        required: false\n      test_access:\n        type: list\n        description: Test access facilities available on the VL\n        required: false\n        entry_schema:\n          type: string\n          constraints:\n            - valid_values: [ passive_monitoring, active_loopback ]\n      vl_profile:\n        type: tosca.datatypes.nfv.VlProfile\n        description: Defines additional data for the VL\n        required: true\n      monitoring_parameters:\n        type: list\n        description: Describes monitoring parameters applicable to the VL\n        required: false\n        entry_schema:\n          type: tosca.datatypes.nfv.VirtualLinkMonitoringParameter\n    capabilities:\n      virtual_linkable:\n        type: tosca.capabilities.nfv.VirtualLinkable\n\ngroup_types:\n  tosca.groups.nfv.PlacementGroup:\n    derived_from: tosca.groups.Root\n    description: PlacementGroup is used for describing the affinity or anti-affinity relationship applicable between the virtualization containers to be created based on different VDUs, or between internal VLs to be created based on different VnfVirtualLinkDesc(s)\n    properties:\n      description:\n        type: string\n        description: Human readable description of the group\n        required: true\n    members: [ tosca.nodes.nfv.Vdu.Compute, tosca.nodes.nfv.VnfVirtualLink ]\n\npolicy_types:\n  tosca.policies.nfv.InstantiationLevels:\n    derived_from: tosca.policies.Root\n    description: The InstantiationLevels type is a policy type representing all the instantiation levels of resources to be instantiated within a deployment flavour and including default instantiation level in term of the number of VNFC instances to be created as defined in ETSI GS NFV-IFA 011 [1].\n    properties:\n      levels:\n        type: map # key: levelId\n        description: Describes the various levels of resources that can be used to instantiate the VNF using this flavour.\n        required: true\n        entry_schema:\n          type: tosca.datatypes.nfv.InstantiationLevel\n      default_level:\n        type: string # levelId\n        description: The default instantiation level for this flavour.\n        required: false # required if multiple entries in levels\n\n  tosca.policies.nfv.VduInstantiationLevels:\n    derived_from: tosca.policies.Root\n    description:  The VduInstantiationLevels type is a policy type representing all the instantiation levels of resources to be instantiated within a deployment flavour in term of the number of VNFC instances to be created from each vdu.Compute. as defined in ETSI GS NFV-IFA 011 [1]\n    properties:\n      levels:\n        type: map # key: levelId\n        description: Describes the Vdu.Compute levels of resources that can be used to instantiate the VNF using this flavour\n        required: true\n        entry_schema:\n          type: tosca.datatypes.nfv.VduLevel\n    targets: [ tosca.nodes.nfv.Vdu.Compute ]\n\n  tosca.policies.nfv.VirtualLinkInstantiationLevels:\n    derived_from: tosca.policies.Root\n    description:  The VirtualLinkInstantiationLevels type is a policy type representing all the instantiation levels of virtual link resources to be instantiated within a deployment flavour as defined in ETSI GS NFV-IFA 011 [1].\n    properties:\n      levels:\n        type: map # key: levelId\n        description: Describes the virtual link levels of resources that can be used to instantiate the VNF using this flavour.\n        required: true\n        entry_schema:\n          type: tosca.datatypes.nfv.VirtualLinkBitrateLevel\n    targets: [ tosca.nodes.nfv.VnfVirtualLink ]\n\n  tosca.policies.nfv.ScalingAspects:\n    derived_from: tosca.policies.Root\n    description: The ScalingAspects type is a policy type representing the scaling aspects used for horizontal scaling as defined in ETSI GS NFV-IFA 011 [1].\n    properties:\n      aspects:\n        type: map # key: aspectId\n        description: Describe maximum scale level for total number of scaling steps that can be applied to a particular aspect\n        required: true\n        entry_schema:\n          type: tosca.datatypes.nfv.ScalingAspect\n\n  tosca.policies.nfv.VduScalingAspectDeltas:\n    derived_from: tosca.policies.Root\n    description: The VduScalingAspectDeltas type is a policy type representing the Vdu.Compute detail of an aspect deltas used for horizontal scaling, as defined in ETSI GS NFV-IFA 011 [1].\n    properties:\n      aspect:\n        type: string\n        description: Represents the scaling aspect to which this policy applies\n        required: true\n      deltas:\n        type: map # key: scalingDeltaId\n        description: Describes the Vdu.Compute scaling deltas to be applied for every scaling steps of a particular aspect.\n        required: true\n        entry_schema:\n          type: tosca.datatypes.nfv.VduLevel\n    targets: [ tosca.nodes.nfv.Vdu.Compute ]\n\n  tosca.policies.nfv.VirtualLinkBitrateScalingAspectDeltas:\n    derived_from: tosca.policies.Root\n    description: The VirtualLinkBitrateScalingAspectDeltas type is a policy type representing the VnfVirtualLink detail of an aspect deltas used for horizontal scaling, as defined in ETSI GS NFV-IFA 011 [1].\n    properties:\n      aspect:\n        type: string\n        description: Represents the scaling aspect to which this policy applies.\n        required: true\n      deltas:\n        type: map # key: scalingDeltaId\n        description: Describes the VnfVirtualLink scaling deltas to be applied for every scaling steps of a particular aspect.\n        required: true\n        entry_schema:\n          type: tosca.datatypes.nfv.VirtualLinkBitrateLevel\n    targets: [ tosca.nodes.nfv.VnfVirtualLink ]\n\n  tosca.policies.nfv.VduInitialDelta:\n    derived_from: tosca.policies.Root\n    description: The VduInitialDelta type is a policy type representing the Vdu.Compute detail of an initial delta used for horizontal scaling, as defined in ETSI GS NFV-IFA 011 [1].\n    properties:\n      initial_delta:\n        type: tosca.datatypes.nfv.VduLevel\n        description: Represents the initial minimum size of the VNF.\n        required: true\n    targets: [ tosca.nodes.nfv.Vdu.Compute ]\n\n  tosca.policies.nfv.VirtualLinkBitrateInitialDelta:\n    derived_from: tosca.policies.Root\n    description: The VirtualLinkBitrateInitialDelta type is a policy type representing the VnfVirtualLink detail of an initial deltas used for horizontal scaling, as defined in ETSI GS NFV-IFA 011 [1].\n    properties:\n      initial_delta:\n        type: tosca.datatypes.nfv.VirtualLinkBitrateLevel\n        description: Represents the initial minimum size of the VNF.\n        required: true\n    targets: [ tosca.nodes.nfv.VnfVirtualLink ]\n\n  tosca.policies.nfv.AffinityRule:\n    derived_from: tosca.policies.Placement\n    description: The AffinityRule describes the affinity rules applicable for the defined targets\n    properties:\n      scope:\n        type: string\n        description: scope of the rule is an NFVI_node, an NFVI_PoP, etc.\n        required: true\n        constraints:\n          - valid_values: [ nfvi_node, zone, zone_group, nfvi_pop ]\n    targets: [ tosca.nodes.nfv.Vdu.Compute, tosca.nodes.nfv.VnfVirtualLink, tosca.groups.nfv.PlacementGroup ]\n\n  tosca.policies.nfv.AntiAffinityRule:\n    derived_from: tosca.policies.Placement\n    description: The AntiAffinityRule describes the anti-affinity rules applicable for the defined targets\n    properties:\n      scope:\n        type: string\n        description: scope of the rule is an NFVI_node, an NFVI_PoP, etc.\n        required: true\n        constraints:\n          - valid_values: [ nfvi_node, zone, zone_group, nfvi_pop ]\n    targets: [ tosca.nodes.nfv.Vdu.Compute, tosca.nodes.nfv.VnfVirtualLink, tosca.groups.nfv.PlacementGroup ]\n\n  tosca.policies.nfv.SecurityGroupRule:\n    derived_from: tosca.policies.Root\n    description: The SecurityGroupRule type is a policy type specified the matching criteria for the ingress and/or egress traffic to/from visited connection points as defined in ETSI GS NFV-IFA 011 [1].\n    properties:\n      description:\n        type: string\n        description: Human readable description of the security group rule.\n        required: false\n      direction:\n        type: string\n        description: The direction in which the security group rule is applied. The direction of 'ingress' or 'egress' is specified against the associated CP. I.e., 'ingress' means the packets entering a CP, while 'egress' means the packets sent out of a CP.\n        required: false\n        constraints:\n          - valid_values: [ ingress, egress ]\n        default: ingress\n      ether_type:\n        type: string\n        description: Indicates the protocol carried over the Ethernet layer.\n        required: false\n        constraints:\n          - valid_values: [ ipv4, ipv6 ]\n        default: ipv4\n      protocol:\n        type: string\n        description: Indicates the protocol carried over the IP layer. Permitted values include any protocol defined in the IANA protocol registry, e.g. TCP, UDP, ICMP, etc.\n        required: false\n        constraints:\n          - valid_values: [ hopopt, icmp, igmp, ggp, ipv4, st, tcp, cbt, egp, igp, bbn_rcc_mon, nvp_ii, pup, argus, emcon, xnet, chaos, udp, mux, dcn_meas, hmp, prm, xns_idp, trunk_1, trunk_2, leaf_1, leaf_2, rdp, irtp, iso_tp4, netblt, mfe_nsp, merit_inp, dccp, 3pc, idpr, xtp, ddp, idpr_cmtp, tp++, il, ipv6, sdrp, ipv6_route, ipv6_frag, idrp, rsvp, gre, dsr, bna, esp, ah, i_nlsp, swipe, narp, mobile, tlsp, skip, ipv6_icmp, ipv6_no_nxt, ipv6_opts, cftp, sat_expak, kryptolan, rvd, ippc, sat_mon, visa, ipcv, cpnx, cphb, wsn, pvp, br_sat_mon, sun_nd, wb_mon, wb_expak, iso_ip, vmtp, secure_vmtp, vines, ttp, iptm, nsfnet_igp, dgp, tcf, eigrp, ospfigp, sprite_rpc, larp, mtp, ax.25, ipip, micp, scc_sp, etherip, encap, gmtp, ifmp, pnni, pim, aris, scps, qnx, a/n, ip_comp, snp, compaq_peer, ipx_in_ip, vrrp, pgm, l2tp, ddx, iatp, stp, srp, uti, smp, sm, ptp, isis, fire, crtp, crudp, sscopmce, iplt, sps, pipe, sctp, fc, rsvp_e2e_ignore, mobility, udp_lite, mpls_in_ip, manet, hip, shim6, wesp, rohc ]\n        default: tcp\n      port_range_min:\n        type: integer\n        description: Indicates minimum port number in the range that is matched by the security group rule. If a value is provided at design-time, this value may be overridden at run-time based on other deployment requirements or constraints.\n        required: false\n        constraints:\n          - greater_or_equal: 0\n          - less_or_equal: 65535\n        default: 0\n      port_range_max:\n        type: integer\n        description: Indicates maximum port number in the range that is matched by the security group rule. If a value is provided at design-time, this value may be overridden at run-time based on other deployment requirements or constraints.\n        required: false\n        constraints:\n          - greater_or_equal: 0\n          - less_or_equal: 65535\n        default: 65535\n    targets: [ tosca.nodes.nfv.VduCp, tosca.nodes.nfv.VnfExtCp ]\n\n  tosca.policies.nfv.SupportedVnfInterface:\n    derived_from: tosca.policies.Root\n    description:  this policy type represents interfaces produced by a VNF, the details to access them and the applicable connection points to use to access these interfaces\n    properties:\n      interface_name:\n        type: string\n        description: Identifies an interface produced by the VNF.\n        required: true\n        constraints:\n          - valid_values: [ vnf_indicator, vnf_configuration ]\n      details:\n        type: tosca.datatypes.nfv.InterfaceDetails\n        description: Provide additional data to access the interface endpoint\n        required: false\n    targets: [ tosca.nodes.nfv.VnfExtCp, tosca.nodes.nfv.VduCp ]\n"),
	}

	// define dirs
	dir1 := &embedded.EmbeddedDir{
		Filename:   "",
		DirModTime: time.Unix(1604607464, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			file2, // "TOSCA.meta"
			file3, // "vmware_etsi_nfv_sol001_vnfd_2_5_1_types.yaml"

		},
	}

	// link ChildDirs
	dir1.ChildDirs = []*embedded.EmbeddedDir{}

	// register embeddedBox
	embedded.RegisterEmbeddedBox(`../assets`, &embedded.EmbeddedBox{
		Name: `../assets`,
		Time: time.Unix(1604607464, 0),
		Dirs: map[string]*embedded.EmbeddedDir{
			"": dir1,
		},
		Files: map[string]*embedded.EmbeddedFile{
			"TOSCA.meta":                                   file2,
			"vmware_etsi_nfv_sol001_vnfd_2_5_1_types.yaml": file3,
		},
	})
}

func init() {

	// define files
	file5 := &embedded.EmbeddedFile{
		Filename:    "VNFD.mf",
		FileModTime: time.Unix(1604692468, 0),

		Content: string("metadata:\nvnfd_id: {{ .ID }}\nvnf_provider_id: {{ .Provider }}\nvnf_product_name: {{ .ProductName }}\nvnf_release_date_time : {{ .ReleaseDateTime }}\nvnf_software_version: {{ .SoftwareVersion }}\ncompatible_specification_versions: 2.7.1\nvnfm_info: gvnfmdriver"),
	}
	file6 := &embedded.EmbeddedFile{
		Filename:    "VNFD.yaml",
		FileModTime: time.Unix(1604955704, 0),

		Content: string("tosca_definitions_version: tosca_simple_profile_for_nfv_1_0_0\ndescription: Network Function description\nimports:\n  - vmware_etsi_nfv_sol001_vnfd_2_5_1_types.yaml\nnode_types:\n  tosca.nodes.nfv.VMware.CNF.{{ .CSARName }}:\n    derived_from: tosca.nodes.nfv.VMware.CNF\n    interfaces:\n      Vnflcm:\n        type: tosca.interfaces.nfv.Vnflcm\n  tosca.nodes.nfv.Vdu.Compute.Helm.{{ .HelmStepName }}:\n    derived_from: tosca.nodes.nfv.Vdu.Compute.Helm\n    properties:\n      configurable_properties:\n        type: tosca.datatypes.nfv.VnfcConfigurableProperties.{{ .HelmStepName }}\n        required: true\ndata_types:\n  tosca.datatypes.nfv.VnfcConfigurableProperties.{{ .HelmStepName }}:\n    derived_from: tosca.datatypes.nfv.VnfcConfigurableProperties\n    properties:\n      additional_vnfc_configurable_properties:\n        type: >-\n          tosca.datatypes.nfv.VnfcAdditionalConfigurableProperties.{{ .HelmStepName }}\n        description: Describes additional configuration for VNFC that can be configured\n        required: true\n  tosca.datatypes.nfv.VnfcAdditionalConfigurableProperties.{{ .HelmStepName }}:\n    derived_from: tosca.datatypes.nfv.VnfcAdditionalConfigurableProperties\n    properties:\n      values:\n        required: true\n        propertyName: values\n        description: ''\n        default: ''\n        type: string\n        format: file\ntopology_template:\n  substitution_mappings:\n    node_type: tosca.nodes.nfv.VMware.CNF.{{ .CSARName }}\n    properties:\n      descriptor_id: {{ .ID }}\n      provider: {{ .Provider }}\n      vendor: '{{ .Vendor }}'\n      product_name: {{ .ProductName }}\n      version: {{ .HelmChartVersion }}\n      id: id\n      software_version: {{ .SoftwareVersion }}\n      descriptor_version: descriptor_version\n      flavour_id: default\n      flavour_description: default\n      vnfm_info:\n        - gvnfmdriver\n    interfaces:\n      Vnflcm: {}\n  node_templates:\n    {{ .CSARName }}:\n      node_type: tosca.nodes.nfv.VMware.CNF.{{ .CSARName }}\n      properties:\n        descriptor_id: {{ .ID }}\n        provider: {{ .Provider }}\n        vendor: '{{ .Vendor }}'\n        product_name: {{ .ProductName }}\n        version: {{ .HelmChartVersion }}\n        id: id\n        software_version: {{ .SoftwareVersion }}\n        descriptor_version: descriptor_version\n        flavour_id: default\n        flavour_description: default\n        vnfm_info:\n          - gvnfmdriver\n      interfaces:\n        Vnflcm: {}\n    {{ .HelmStepName }}:\n      type: tosca.nodes.nfv.Vdu.Compute.Helm.{{ .HelmStepName }}\n      properties:\n        name: {{ .HelmStepName }}\n        description: '{{ .HelmStepDescription }}'\n        chartName: {{ .HelmChartName }}\n        chartVersion: {{ .HelmChartVersion }}\n        helmVersion: v3\n        id: helm1\n        configurable_properties:\n          additional_vnfc_configurable_properties:\n            type: >-\n              tosca.datatypes.nfv.VnfcAdditionalConfigurableProperties.{{ .HelmStepName }}\n            values: ''\n  policies:\n    - policy_scale:\n        type: tosca.policies.nfv.SupportedVnfInterface\n        properties:\n          interface_name: scale\n          interface_type: operation\n          isEnabled: true\n    - policy_workflow:\n        type: tosca.policies.nfv.SupportedVnfInterface\n        properties:\n          interface_name: workflow\n          interface_type: operation\n          isEnabled: true\n    - policy_reconfigure:\n        type: tosca.policies.nfv.SupportedVnfInterface\n        properties:\n          interface_name: reconfigure\n          interface_type: operation\n          isEnabled: true\n    - policy_update:\n        type: tosca.policies.nfv.SupportedVnfInterface\n        properties:\n          interface_name: update\n          interface_type: operation\n          isEnabled: true\n    - policy_upgrade:\n        type: tosca.policies.nfv.SupportedVnfInterface\n        properties:\n          interface_name: upgrade\n          interface_type: operation\n          isEnabled: true\n    - policy_upgrade_package:\n        type: tosca.policies.nfv.SupportedVnfInterface\n        properties:\n          interface_name: upgrade_package\n          interface_type: operation\n          isEnabled: true\n"),
	}

	// define dirs
	dir4 := &embedded.EmbeddedDir{
		Filename:   "",
		DirModTime: time.Unix(1604955704, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			file5, // "VNFD.mf"
			file6, // "VNFD.yaml"

		},
	}

	// link ChildDirs
	dir4.ChildDirs = []*embedded.EmbeddedDir{}

	// register embeddedBox
	embedded.RegisterEmbeddedBox(`../templates`, &embedded.EmbeddedBox{
		Name: `../templates`,
		Time: time.Unix(1604955704, 0),
		Dirs: map[string]*embedded.EmbeddedDir{
			"": dir4,
		},
		Files: map[string]*embedded.EmbeddedFile{
			"VNFD.mf":   file5,
			"VNFD.yaml": file6,
		},
	})
}
